// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  progress Progress[]
  parentOf  User[]   @relation("ParentChild")
  childOf   User?    @relation("ParentChild", fields: [parentId], references: [id])
  parentId  String?
  badges    UserBadge[]

  @@map("users")
}

model Subject {
  id          String   @id @default(cuid())
  key         String   @unique
  title       String
  emoji       String
  description String
  order       Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lessons Lesson[]

  @@map("subjects")
}

model AgeGroup {
  id        String   @id @default(cuid())
  key       String   @unique
  title     String
  minAge    Int
  maxAge    Int
  order     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lessons Lesson[]

  @@map("age_groups")
}

model Lesson {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  summary     String
  minutes     Int
  body        Json     // Structured content with sections
  isPublished Boolean  @default(false)
  isLocked   Boolean  @default(true) // For premium content
  order      Int
  subjectId  String
  ageGroupId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  subject   Subject   @relation(fields: [subjectId], references: [id])
  ageGroup  AgeGroup  @relation(fields: [ageGroupId], references: [id])
  quiz      Quiz?
  progress  Progress[]

  @@map("lessons")
}

model Quiz {
  id        String   @id @default(cuid())
  lessonId  String   @unique
  title     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lesson    Lesson        @relation(fields: [lessonId], references: [id])
  questions QuizQuestion[]

  @@map("quizzes")
}

model QuizQuestion {
  id       String   @id @default(cuid())
  quizId   String
  order    Int
  text     String
  type     QuestionType
  isActive Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quiz    Quiz         @relation(fields: [quizId], references: [id])
  options QuizOption[]

  @@map("quiz_questions")
}

model QuizOption {
  id         String   @id @default(cuid())
  questionId String
  order      Int
  text       String
  isCorrect  Boolean
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  question QuizQuestion @relation(fields: [questionId], references: [id])

  @@map("quiz_options")
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  score     Int?     // Quiz score (0-100)
  streak    Int      @default(0) // Consecutive days
  facts     Json?    // Additional progress data
  completed Boolean  @default(false)
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
  @@map("progress")
}

model Badge {
  id          String   @id @default(cuid())
  key         String   @unique
  title       String
  description String
  icon        String
  criteria    Json     // Badge earning criteria
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  badge Badge @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
  @@map("user_badges")
}

enum UserRole {
  STUDENT
  PARENT
  TEACHER
  ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  ORDERING
  MATCHING
}
