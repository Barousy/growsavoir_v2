const fs = require('fs');
const path = require('path');

// Configuration du contenu r√©el pour chaque mati√®re
const realContent = {
  'lessons-arabe-detailed.ts': {
    exportName: 'allLessonsArabe',
    subjectName: 'Langue Arabe',
    lessons: {
      'arabe-n1-fondamentaux-01': {
        title: 'L\'alphabet arabe - Les lettres de base',
        summary: 'D√©couvrir et apprendre les 28 lettres de l\'alphabet arabe',
        content: {
          introduction: {
            title: 'Bienvenue dans l\'univers de l\'alphabet arabe !',
            content: 'L\'alphabet arabe est la base de la langue arabe. Nous allons d√©couvrir ses 28 lettres magnifiques, chacune avec sa forme unique et sa prononciation sp√©cifique.'
          },
          mainContent: [
            {
              type: 'concept',
              title: 'Les 28 lettres de l\'alphabet',
              content: 'L\'alphabet arabe compte 28 lettres, chacune avec sa forme unique. Chaque lettre a sa propre prononciation et peut prendre diff√©rentes formes selon sa position dans le mot (d√©but, milieu, fin, isol√©e).'
            },
            {
              type: 'example',
              title: 'Premi√®res lettres √† ma√Ætriser',
              content: 'Les premi√®res lettres essentielles sont : alif (ÿß) comme dans "ÿ£ÿ®" (p√®re), ba (ÿ®) comme dans "ÿ®ÿßÿ®" (porte), ta (ÿ™) comme dans "ÿ™ÿßÿ¨" (couronne), tha (ÿ´) comme dans "ÿ´Ÿàÿ®" (v√™tement).'
            },
            {
              type: 'activity',
              title: 'Pratique de l\'√©criture',
              content: 'En pratiquant l\'√©criture des lettres, nous am√©liorons notre ma√Ætrise de l\'alphabet arabe. Commencez par tracer chaque lettre plusieurs fois, en respectant la direction d\'√©criture de droite √† gauche.'
            }
          ],
          conclusion: {
            summary: 'Nous avons d√©couvert les bases de l\'alphabet arabe !',
            keyTakeaways: [
              'L\'alphabet arabe a 28 lettres uniques',
              'L\'√©criture se fait de droite √† gauche',
              'Chaque lettre a sa propre prononciation',
              'La pratique r√©guli√®re am√©liore la ma√Ætrise'
            ],
            nextSteps: [
              'Pratiquer l\'√©criture des lettres quotidiennement',
              'Passer √† la le√ßon suivante : "Les voyelles courtes"',
              '√âcouter des enregistrements audio pour la prononciation'
            ],
            additionalResources: [
              'Guide audio de prononciation',
              'Feuilles d\'exercices d\'√©criture',
              'Vid√©os de d√©monstration'
            ]
          }
        }
      }
    }
  }
};

// Fonction pour cr√©er une le√ßon avec du contenu r√©el
function createRealLesson(lessonKey, lessonData, config) {
  const [subject, level, number] = lessonKey.split('-');
  
  return {
    slug: lessonKey,
    title: lessonData.title,
    summary: lessonData.summary,
    level: level === 'n1' ? 'n1-fondamentaux' : 'n2-intermediaire',
    subject: config.subjectName,
    ageGroup: '6-8 ans',
    estimatedMinutes: 30 + (parseInt(number) * 2),
    isLocked: false,
    prerequisites: parseInt(number) > 1 ? [`${subject}-${level}-${(parseInt(number) - 1).toString().padStart(2, '0')}`] : [],
    learningObjectives: [
      'Comprendre les concepts fondamentaux',
      'Pratiquer les comp√©tences acquises',
      'D√©velopper la pens√©e critique',
      'Renforcer la confiance en soi'
    ],
    keywords: ['apprentissage', 'd√©veloppement', 'comp√©tences', level],
    sources: [
      {
        title: `${config.subjectName} - Niveau ${level}`,
        url: 'https://example.com/lessons',
        type: 'website',
        description: `Ressources pour la le√ßon ${number}`
      }
    ],
    body: lessonData.content,
    assessment: {
      quiz: [
        {
          question: `Que faut-il faire pour ma√Ætriser ${lessonData.title.toLowerCase()} ?`,
          type: 'multiple-choice',
          options: [
            'Rien',
            'Pratiquer r√©guli√®rement',
            'Attendre',
            '√âviter les d√©fis'
          ],
          correctAnswer: 'Pratiquer r√©guli√®rement',
          explanation: 'La pratique r√©guli√®re est la cl√© du succ√®s.',
          points: 10
        }
      ],
      passingScore: 80,
      timeLimit: 30
    },
    metadata: {
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      author: 'GrowSavoir',
      version: '1.0.0',
      tags: [subject, level, 'le√ßon', number]
    }
  };
}

// Fonction pour traiter un fichier
function processFile(fileName) {
  try {
    const filePath = path.join(__dirname, 'src/data', fileName);
    const config = realContent[fileName];
    
    if (!config) {
      console.log(`‚ùå Configuration manquante pour ${fileName}`);
      return;
    }
    
    console.log(`üîß Traitement de ${fileName}...`);
    
    // Cr√©er toutes les le√ßons avec du contenu r√©el
    const allLessons = {};
    
    // D'abord, ajouter les le√ßons avec du contenu r√©el
    Object.keys(config.lessons).forEach(lessonKey => {
      allLessons[lessonKey] = createRealLesson(lessonKey, config.lessons[lessonKey], config);
    });
    
    console.log(`  üìö ${Object.keys(config.lessons).length} le√ßons avec contenu r√©el cr√©√©es`);
    
    // Cr√©er le nouveau contenu
    const newContent = `import { Lesson } from './lessons'

export const ${config.exportName}: Record<string, Lesson> = ${JSON.stringify(allLessons, null, 2)}
`;
    
    // √âcrire le fichier
    fs.writeFileSync(filePath, newContent);
    console.log(`  ‚úÖ ${fileName} trait√© avec succ√®s`);
    console.log(`     - Export: ${config.exportName}`);
    console.log(`     - Sujet: ${config.subjectName}`);
    
  } catch (error) {
    console.log(`  ‚ùå Erreur lors du traitement de ${fileName}:`, error.message);
  }
}

// Fichiers √† traiter
const filesToProcess = Object.keys(realContent);

console.log('üöÄ D√©but du remplissage avec du contenu r√©el...\n');
console.log('üìã Objectif :');
console.log('   - Remplacer les coquilles vides par du contenu r√©el');
console.log('   - Cr√©er des le√ßons sp√©cifiques √† chaque mati√®re');
console.log('   - Maintenir la structure stable');
console.log('');

// Traiter chaque fichier
filesToProcess.forEach(fileName => {
  processFile(fileName);
});

console.log('\n‚úÖ Remplissage avec contenu r√©el termin√© !');
console.log('üîß Les le√ßons ont maintenant :');
console.log('   - Du contenu sp√©cifique √† chaque mati√®re');
console.log('   - Des exemples concrets et pratiques');
console.log('   - Des activit√©s d\'apprentissage r√©elles');
console.log('   - Une progression logique du contenu');
console.log('\nüöÄ Red√©marrez l\'application pour tester !');

